import { HeroSetting } from "@prisma/client"; // üö® CORRE√á√ÉO: Usar HeroSetting (O nome do modelo principal)
import { IHeroSettingRepository } from "../interfaces/IHeroSettingRepository";
// üö® CORRE√á√ÉO: Usar o DTO correto que existe no common/types.ts
import { HeroSettingsDTO } from "../common/types";

// Assumindo que o tipo HeroSlide est√° definido na interface do reposit√≥rio ou n√£o √© usado diretamente aqui
interface HeroSlide {
  /* ... */
} // Pode ser importado da interface IHeroSettingRepository se definido l√°

export class HeroService {
  constructor(private heroSettingRepository: IHeroSettingRepository) {}

  // üö® CORRE√á√ÉO: Ajustar o tipo de retorno e usar o m√©todo atualizado do reposit√≥rio
  async getSettingsAndSlides(): Promise<{
    settings: HeroSetting | null;
    slides: HeroSlide[];
  }> {
    // 1. Busca as configura√ß√µes (HeroSetting)
    const settings = await this.heroSettingRepository.getSettings();

    // 2. Chama getSlides com o ID da configura√ß√£o
    const slides = settings
      ? await this.heroSettingRepository.getSlides(settings.id)
      : [];

    // 3. Retorna a combina√ß√£o
    return { settings, slides };
  }

  async updateSettings(data: Partial<HeroSettingsDTO>): Promise<HeroSetting> {
    return this.heroSettingRepository.updateSettings(data);
  }
}
