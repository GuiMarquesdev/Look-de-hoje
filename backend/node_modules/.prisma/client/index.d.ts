
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Piece
 * 
 */
export type Piece = $Result.DefaultSelection<Prisma.$PiecePayload>
/**
 * Model StoreSetting
 * 
 */
export type StoreSetting = $Result.DefaultSelection<Prisma.$StoreSettingPayload>
/**
 * Model AdminCredentials
 * 
 */
export type AdminCredentials = $Result.DefaultSelection<Prisma.$AdminCredentialsPayload>
/**
 * Model HeroSetting
 * 
 */
export type HeroSetting = $Result.DefaultSelection<Prisma.$HeroSettingPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.category.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.piece`: Exposes CRUD operations for the **Piece** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pieces
    * const pieces = await prisma.piece.findMany()
    * ```
    */
  get piece(): Prisma.PieceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.storeSetting`: Exposes CRUD operations for the **StoreSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StoreSettings
    * const storeSettings = await prisma.storeSetting.findMany()
    * ```
    */
  get storeSetting(): Prisma.StoreSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminCredentials`: Exposes CRUD operations for the **AdminCredentials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminCredentials
    * const adminCredentials = await prisma.adminCredentials.findMany()
    * ```
    */
  get adminCredentials(): Prisma.AdminCredentialsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.heroSetting`: Exposes CRUD operations for the **HeroSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HeroSettings
    * const heroSettings = await prisma.heroSetting.findMany()
    * ```
    */
  get heroSetting(): Prisma.HeroSettingDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.18.0
   * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import Bytes = runtime.Bytes
  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Category: 'Category',
    Piece: 'Piece',
    StoreSetting: 'StoreSetting',
    AdminCredentials: 'AdminCredentials',
    HeroSetting: 'HeroSetting'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "category" | "piece" | "storeSetting" | "adminCredentials" | "heroSetting"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Piece: {
        payload: Prisma.$PiecePayload<ExtArgs>
        fields: Prisma.PieceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PieceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PiecePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PieceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PiecePayload>
          }
          findFirst: {
            args: Prisma.PieceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PiecePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PieceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PiecePayload>
          }
          findMany: {
            args: Prisma.PieceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PiecePayload>[]
          }
          create: {
            args: Prisma.PieceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PiecePayload>
          }
          createMany: {
            args: Prisma.PieceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PieceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PiecePayload>
          }
          update: {
            args: Prisma.PieceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PiecePayload>
          }
          deleteMany: {
            args: Prisma.PieceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PieceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PieceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PiecePayload>
          }
          aggregate: {
            args: Prisma.PieceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePiece>
          }
          groupBy: {
            args: Prisma.PieceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PieceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PieceCountArgs<ExtArgs>
            result: $Utils.Optional<PieceCountAggregateOutputType> | number
          }
        }
      }
      StoreSetting: {
        payload: Prisma.$StoreSettingPayload<ExtArgs>
        fields: Prisma.StoreSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoreSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoreSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreSettingPayload>
          }
          findFirst: {
            args: Prisma.StoreSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoreSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreSettingPayload>
          }
          findMany: {
            args: Prisma.StoreSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreSettingPayload>[]
          }
          create: {
            args: Prisma.StoreSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreSettingPayload>
          }
          createMany: {
            args: Prisma.StoreSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StoreSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreSettingPayload>
          }
          update: {
            args: Prisma.StoreSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreSettingPayload>
          }
          deleteMany: {
            args: Prisma.StoreSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoreSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StoreSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreSettingPayload>
          }
          aggregate: {
            args: Prisma.StoreSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStoreSetting>
          }
          groupBy: {
            args: Prisma.StoreSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoreSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoreSettingCountArgs<ExtArgs>
            result: $Utils.Optional<StoreSettingCountAggregateOutputType> | number
          }
        }
      }
      AdminCredentials: {
        payload: Prisma.$AdminCredentialsPayload<ExtArgs>
        fields: Prisma.AdminCredentialsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminCredentialsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminCredentialsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminCredentialsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminCredentialsPayload>
          }
          findFirst: {
            args: Prisma.AdminCredentialsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminCredentialsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminCredentialsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminCredentialsPayload>
          }
          findMany: {
            args: Prisma.AdminCredentialsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminCredentialsPayload>[]
          }
          create: {
            args: Prisma.AdminCredentialsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminCredentialsPayload>
          }
          createMany: {
            args: Prisma.AdminCredentialsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdminCredentialsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminCredentialsPayload>
          }
          update: {
            args: Prisma.AdminCredentialsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminCredentialsPayload>
          }
          deleteMany: {
            args: Prisma.AdminCredentialsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminCredentialsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminCredentialsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminCredentialsPayload>
          }
          aggregate: {
            args: Prisma.AdminCredentialsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminCredentials>
          }
          groupBy: {
            args: Prisma.AdminCredentialsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminCredentialsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCredentialsCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCredentialsCountAggregateOutputType> | number
          }
        }
      }
      HeroSetting: {
        payload: Prisma.$HeroSettingPayload<ExtArgs>
        fields: Prisma.HeroSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HeroSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HeroSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroSettingPayload>
          }
          findFirst: {
            args: Prisma.HeroSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HeroSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroSettingPayload>
          }
          findMany: {
            args: Prisma.HeroSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroSettingPayload>[]
          }
          create: {
            args: Prisma.HeroSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroSettingPayload>
          }
          createMany: {
            args: Prisma.HeroSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HeroSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroSettingPayload>
          }
          update: {
            args: Prisma.HeroSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroSettingPayload>
          }
          deleteMany: {
            args: Prisma.HeroSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HeroSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HeroSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeroSettingPayload>
          }
          aggregate: {
            args: Prisma.HeroSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHeroSetting>
          }
          groupBy: {
            args: Prisma.HeroSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<HeroSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.HeroSettingCountArgs<ExtArgs>
            result: $Utils.Optional<HeroSettingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    category?: CategoryOmit
    piece?: PieceOmit
    storeSetting?: StoreSettingOmit
    adminCredentials?: AdminCredentialsOmit
    heroSetting?: HeroSettingOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    pieces: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pieces?: boolean | CategoryCountOutputTypeCountPiecesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountPiecesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PieceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    slug: string
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    pieces?: boolean | Category$piecesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>



  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "is_active" | "created_at" | "updated_at", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pieces?: boolean | Category$piecesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      pieces: Prisma.$PiecePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pieces<T extends Category$piecesArgs<ExtArgs> = {}>(args?: Subset<T, Category$piecesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
    readonly is_active: FieldRef<"Category", 'Boolean'>
    readonly created_at: FieldRef<"Category", 'DateTime'>
    readonly updated_at: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.pieces
   */
  export type Category$piecesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    where?: PieceWhereInput
    orderBy?: PieceOrderByWithRelationInput | PieceOrderByWithRelationInput[]
    cursor?: PieceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PieceScalarFieldEnum | PieceScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Piece
   */

  export type AggregatePiece = {
    _count: PieceCountAggregateOutputType | null
    _avg: PieceAvgAggregateOutputType | null
    _sum: PieceSumAggregateOutputType | null
    _min: PieceMinAggregateOutputType | null
    _max: PieceMaxAggregateOutputType | null
  }

  export type PieceAvgAggregateOutputType = {
    image_position_x: number | null
    image_position_y: number | null
    image_zoom: number | null
  }

  export type PieceSumAggregateOutputType = {
    image_position_x: number | null
    image_position_y: number | null
    image_zoom: number | null
  }

  export type PieceMinAggregateOutputType = {
    id: string | null
    name: string | null
    category_id: string | null
    status: string | null
    image_url: string | null
    image_position_x: number | null
    image_position_y: number | null
    image_zoom: number | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PieceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category_id: string | null
    status: string | null
    image_url: string | null
    image_position_x: number | null
    image_position_y: number | null
    image_zoom: number | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PieceCountAggregateOutputType = {
    id: number
    name: number
    category_id: number
    status: number
    image_url: number
    images: number
    image_position_x: number
    image_position_y: number
    image_zoom: number
    description: number
    measurements: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PieceAvgAggregateInputType = {
    image_position_x?: true
    image_position_y?: true
    image_zoom?: true
  }

  export type PieceSumAggregateInputType = {
    image_position_x?: true
    image_position_y?: true
    image_zoom?: true
  }

  export type PieceMinAggregateInputType = {
    id?: true
    name?: true
    category_id?: true
    status?: true
    image_url?: true
    image_position_x?: true
    image_position_y?: true
    image_zoom?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type PieceMaxAggregateInputType = {
    id?: true
    name?: true
    category_id?: true
    status?: true
    image_url?: true
    image_position_x?: true
    image_position_y?: true
    image_zoom?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type PieceCountAggregateInputType = {
    id?: true
    name?: true
    category_id?: true
    status?: true
    image_url?: true
    images?: true
    image_position_x?: true
    image_position_y?: true
    image_zoom?: true
    description?: true
    measurements?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PieceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Piece to aggregate.
     */
    where?: PieceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pieces to fetch.
     */
    orderBy?: PieceOrderByWithRelationInput | PieceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PieceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pieces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pieces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pieces
    **/
    _count?: true | PieceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PieceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PieceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PieceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PieceMaxAggregateInputType
  }

  export type GetPieceAggregateType<T extends PieceAggregateArgs> = {
        [P in keyof T & keyof AggregatePiece]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePiece[P]>
      : GetScalarType<T[P], AggregatePiece[P]>
  }




  export type PieceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PieceWhereInput
    orderBy?: PieceOrderByWithAggregationInput | PieceOrderByWithAggregationInput[]
    by: PieceScalarFieldEnum[] | PieceScalarFieldEnum
    having?: PieceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PieceCountAggregateInputType | true
    _avg?: PieceAvgAggregateInputType
    _sum?: PieceSumAggregateInputType
    _min?: PieceMinAggregateInputType
    _max?: PieceMaxAggregateInputType
  }

  export type PieceGroupByOutputType = {
    id: string
    name: string
    category_id: string
    status: string
    image_url: string | null
    images: JsonValue | null
    image_position_x: number | null
    image_position_y: number | null
    image_zoom: number | null
    description: string | null
    measurements: JsonValue | null
    created_at: Date
    updated_at: Date
    _count: PieceCountAggregateOutputType | null
    _avg: PieceAvgAggregateOutputType | null
    _sum: PieceSumAggregateOutputType | null
    _min: PieceMinAggregateOutputType | null
    _max: PieceMaxAggregateOutputType | null
  }

  type GetPieceGroupByPayload<T extends PieceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PieceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PieceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PieceGroupByOutputType[P]>
            : GetScalarType<T[P], PieceGroupByOutputType[P]>
        }
      >
    >


  export type PieceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category_id?: boolean
    status?: boolean
    image_url?: boolean
    images?: boolean
    image_position_x?: boolean
    image_position_y?: boolean
    image_zoom?: boolean
    description?: boolean
    measurements?: boolean
    created_at?: boolean
    updated_at?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["piece"]>



  export type PieceSelectScalar = {
    id?: boolean
    name?: boolean
    category_id?: boolean
    status?: boolean
    image_url?: boolean
    images?: boolean
    image_position_x?: boolean
    image_position_y?: boolean
    image_zoom?: boolean
    description?: boolean
    measurements?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PieceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category_id" | "status" | "image_url" | "images" | "image_position_x" | "image_position_y" | "image_zoom" | "description" | "measurements" | "created_at" | "updated_at", ExtArgs["result"]["piece"]>
  export type PieceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $PiecePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Piece"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category_id: string
      status: string
      image_url: string | null
      images: Prisma.JsonValue | null
      image_position_x: number | null
      image_position_y: number | null
      image_zoom: number | null
      description: string | null
      measurements: Prisma.JsonValue | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["piece"]>
    composites: {}
  }

  type PieceGetPayload<S extends boolean | null | undefined | PieceDefaultArgs> = $Result.GetResult<Prisma.$PiecePayload, S>

  type PieceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PieceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PieceCountAggregateInputType | true
    }

  export interface PieceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Piece'], meta: { name: 'Piece' } }
    /**
     * Find zero or one Piece that matches the filter.
     * @param {PieceFindUniqueArgs} args - Arguments to find a Piece
     * @example
     * // Get one Piece
     * const piece = await prisma.piece.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PieceFindUniqueArgs>(args: SelectSubset<T, PieceFindUniqueArgs<ExtArgs>>): Prisma__PieceClient<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Piece that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PieceFindUniqueOrThrowArgs} args - Arguments to find a Piece
     * @example
     * // Get one Piece
     * const piece = await prisma.piece.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PieceFindUniqueOrThrowArgs>(args: SelectSubset<T, PieceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PieceClient<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Piece that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PieceFindFirstArgs} args - Arguments to find a Piece
     * @example
     * // Get one Piece
     * const piece = await prisma.piece.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PieceFindFirstArgs>(args?: SelectSubset<T, PieceFindFirstArgs<ExtArgs>>): Prisma__PieceClient<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Piece that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PieceFindFirstOrThrowArgs} args - Arguments to find a Piece
     * @example
     * // Get one Piece
     * const piece = await prisma.piece.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PieceFindFirstOrThrowArgs>(args?: SelectSubset<T, PieceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PieceClient<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pieces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PieceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pieces
     * const pieces = await prisma.piece.findMany()
     * 
     * // Get first 10 Pieces
     * const pieces = await prisma.piece.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pieceWithIdOnly = await prisma.piece.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PieceFindManyArgs>(args?: SelectSubset<T, PieceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Piece.
     * @param {PieceCreateArgs} args - Arguments to create a Piece.
     * @example
     * // Create one Piece
     * const Piece = await prisma.piece.create({
     *   data: {
     *     // ... data to create a Piece
     *   }
     * })
     * 
     */
    create<T extends PieceCreateArgs>(args: SelectSubset<T, PieceCreateArgs<ExtArgs>>): Prisma__PieceClient<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pieces.
     * @param {PieceCreateManyArgs} args - Arguments to create many Pieces.
     * @example
     * // Create many Pieces
     * const piece = await prisma.piece.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PieceCreateManyArgs>(args?: SelectSubset<T, PieceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Piece.
     * @param {PieceDeleteArgs} args - Arguments to delete one Piece.
     * @example
     * // Delete one Piece
     * const Piece = await prisma.piece.delete({
     *   where: {
     *     // ... filter to delete one Piece
     *   }
     * })
     * 
     */
    delete<T extends PieceDeleteArgs>(args: SelectSubset<T, PieceDeleteArgs<ExtArgs>>): Prisma__PieceClient<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Piece.
     * @param {PieceUpdateArgs} args - Arguments to update one Piece.
     * @example
     * // Update one Piece
     * const piece = await prisma.piece.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PieceUpdateArgs>(args: SelectSubset<T, PieceUpdateArgs<ExtArgs>>): Prisma__PieceClient<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pieces.
     * @param {PieceDeleteManyArgs} args - Arguments to filter Pieces to delete.
     * @example
     * // Delete a few Pieces
     * const { count } = await prisma.piece.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PieceDeleteManyArgs>(args?: SelectSubset<T, PieceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pieces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PieceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pieces
     * const piece = await prisma.piece.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PieceUpdateManyArgs>(args: SelectSubset<T, PieceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Piece.
     * @param {PieceUpsertArgs} args - Arguments to update or create a Piece.
     * @example
     * // Update or create a Piece
     * const piece = await prisma.piece.upsert({
     *   create: {
     *     // ... data to create a Piece
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Piece we want to update
     *   }
     * })
     */
    upsert<T extends PieceUpsertArgs>(args: SelectSubset<T, PieceUpsertArgs<ExtArgs>>): Prisma__PieceClient<$Result.GetResult<Prisma.$PiecePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pieces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PieceCountArgs} args - Arguments to filter Pieces to count.
     * @example
     * // Count the number of Pieces
     * const count = await prisma.piece.count({
     *   where: {
     *     // ... the filter for the Pieces we want to count
     *   }
     * })
    **/
    count<T extends PieceCountArgs>(
      args?: Subset<T, PieceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PieceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Piece.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PieceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PieceAggregateArgs>(args: Subset<T, PieceAggregateArgs>): Prisma.PrismaPromise<GetPieceAggregateType<T>>

    /**
     * Group by Piece.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PieceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PieceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PieceGroupByArgs['orderBy'] }
        : { orderBy?: PieceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PieceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPieceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Piece model
   */
  readonly fields: PieceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Piece.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PieceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Piece model
   */
  interface PieceFieldRefs {
    readonly id: FieldRef<"Piece", 'String'>
    readonly name: FieldRef<"Piece", 'String'>
    readonly category_id: FieldRef<"Piece", 'String'>
    readonly status: FieldRef<"Piece", 'String'>
    readonly image_url: FieldRef<"Piece", 'String'>
    readonly images: FieldRef<"Piece", 'Json'>
    readonly image_position_x: FieldRef<"Piece", 'Float'>
    readonly image_position_y: FieldRef<"Piece", 'Float'>
    readonly image_zoom: FieldRef<"Piece", 'Float'>
    readonly description: FieldRef<"Piece", 'String'>
    readonly measurements: FieldRef<"Piece", 'Json'>
    readonly created_at: FieldRef<"Piece", 'DateTime'>
    readonly updated_at: FieldRef<"Piece", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Piece findUnique
   */
  export type PieceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    /**
     * Filter, which Piece to fetch.
     */
    where: PieceWhereUniqueInput
  }

  /**
   * Piece findUniqueOrThrow
   */
  export type PieceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    /**
     * Filter, which Piece to fetch.
     */
    where: PieceWhereUniqueInput
  }

  /**
   * Piece findFirst
   */
  export type PieceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    /**
     * Filter, which Piece to fetch.
     */
    where?: PieceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pieces to fetch.
     */
    orderBy?: PieceOrderByWithRelationInput | PieceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pieces.
     */
    cursor?: PieceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pieces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pieces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pieces.
     */
    distinct?: PieceScalarFieldEnum | PieceScalarFieldEnum[]
  }

  /**
   * Piece findFirstOrThrow
   */
  export type PieceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    /**
     * Filter, which Piece to fetch.
     */
    where?: PieceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pieces to fetch.
     */
    orderBy?: PieceOrderByWithRelationInput | PieceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pieces.
     */
    cursor?: PieceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pieces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pieces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pieces.
     */
    distinct?: PieceScalarFieldEnum | PieceScalarFieldEnum[]
  }

  /**
   * Piece findMany
   */
  export type PieceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    /**
     * Filter, which Pieces to fetch.
     */
    where?: PieceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pieces to fetch.
     */
    orderBy?: PieceOrderByWithRelationInput | PieceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pieces.
     */
    cursor?: PieceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pieces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pieces.
     */
    skip?: number
    distinct?: PieceScalarFieldEnum | PieceScalarFieldEnum[]
  }

  /**
   * Piece create
   */
  export type PieceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    /**
     * The data needed to create a Piece.
     */
    data: XOR<PieceCreateInput, PieceUncheckedCreateInput>
  }

  /**
   * Piece createMany
   */
  export type PieceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pieces.
     */
    data: PieceCreateManyInput | PieceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Piece update
   */
  export type PieceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    /**
     * The data needed to update a Piece.
     */
    data: XOR<PieceUpdateInput, PieceUncheckedUpdateInput>
    /**
     * Choose, which Piece to update.
     */
    where: PieceWhereUniqueInput
  }

  /**
   * Piece updateMany
   */
  export type PieceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pieces.
     */
    data: XOR<PieceUpdateManyMutationInput, PieceUncheckedUpdateManyInput>
    /**
     * Filter which Pieces to update
     */
    where?: PieceWhereInput
    /**
     * Limit how many Pieces to update.
     */
    limit?: number
  }

  /**
   * Piece upsert
   */
  export type PieceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    /**
     * The filter to search for the Piece to update in case it exists.
     */
    where: PieceWhereUniqueInput
    /**
     * In case the Piece found by the `where` argument doesn't exist, create a new Piece with this data.
     */
    create: XOR<PieceCreateInput, PieceUncheckedCreateInput>
    /**
     * In case the Piece was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PieceUpdateInput, PieceUncheckedUpdateInput>
  }

  /**
   * Piece delete
   */
  export type PieceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
    /**
     * Filter which Piece to delete.
     */
    where: PieceWhereUniqueInput
  }

  /**
   * Piece deleteMany
   */
  export type PieceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pieces to delete
     */
    where?: PieceWhereInput
    /**
     * Limit how many Pieces to delete.
     */
    limit?: number
  }

  /**
   * Piece without action
   */
  export type PieceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Piece
     */
    select?: PieceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Piece
     */
    omit?: PieceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PieceInclude<ExtArgs> | null
  }


  /**
   * Model StoreSetting
   */

  export type AggregateStoreSetting = {
    _count: StoreSettingCountAggregateOutputType | null
    _min: StoreSettingMinAggregateOutputType | null
    _max: StoreSettingMaxAggregateOutputType | null
  }

  export type StoreSettingMinAggregateOutputType = {
    id: string | null
    store_name: string | null
    instagram_url: string | null
    whatsapp_url: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type StoreSettingMaxAggregateOutputType = {
    id: string | null
    store_name: string | null
    instagram_url: string | null
    whatsapp_url: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type StoreSettingCountAggregateOutputType = {
    id: number
    store_name: number
    instagram_url: number
    whatsapp_url: number
    email: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type StoreSettingMinAggregateInputType = {
    id?: true
    store_name?: true
    instagram_url?: true
    whatsapp_url?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type StoreSettingMaxAggregateInputType = {
    id?: true
    store_name?: true
    instagram_url?: true
    whatsapp_url?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type StoreSettingCountAggregateInputType = {
    id?: true
    store_name?: true
    instagram_url?: true
    whatsapp_url?: true
    email?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type StoreSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoreSetting to aggregate.
     */
    where?: StoreSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreSettings to fetch.
     */
    orderBy?: StoreSettingOrderByWithRelationInput | StoreSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoreSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StoreSettings
    **/
    _count?: true | StoreSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreSettingMaxAggregateInputType
  }

  export type GetStoreSettingAggregateType<T extends StoreSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateStoreSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStoreSetting[P]>
      : GetScalarType<T[P], AggregateStoreSetting[P]>
  }




  export type StoreSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreSettingWhereInput
    orderBy?: StoreSettingOrderByWithAggregationInput | StoreSettingOrderByWithAggregationInput[]
    by: StoreSettingScalarFieldEnum[] | StoreSettingScalarFieldEnum
    having?: StoreSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreSettingCountAggregateInputType | true
    _min?: StoreSettingMinAggregateInputType
    _max?: StoreSettingMaxAggregateInputType
  }

  export type StoreSettingGroupByOutputType = {
    id: string
    store_name: string
    instagram_url: string | null
    whatsapp_url: string | null
    email: string | null
    created_at: Date
    updated_at: Date
    _count: StoreSettingCountAggregateOutputType | null
    _min: StoreSettingMinAggregateOutputType | null
    _max: StoreSettingMaxAggregateOutputType | null
  }

  type GetStoreSettingGroupByPayload<T extends StoreSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreSettingGroupByOutputType[P]>
            : GetScalarType<T[P], StoreSettingGroupByOutputType[P]>
        }
      >
    >


  export type StoreSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    store_name?: boolean
    instagram_url?: boolean
    whatsapp_url?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["storeSetting"]>



  export type StoreSettingSelectScalar = {
    id?: boolean
    store_name?: boolean
    instagram_url?: boolean
    whatsapp_url?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type StoreSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "store_name" | "instagram_url" | "whatsapp_url" | "email" | "created_at" | "updated_at", ExtArgs["result"]["storeSetting"]>

  export type $StoreSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StoreSetting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      store_name: string
      instagram_url: string | null
      whatsapp_url: string | null
      email: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["storeSetting"]>
    composites: {}
  }

  type StoreSettingGetPayload<S extends boolean | null | undefined | StoreSettingDefaultArgs> = $Result.GetResult<Prisma.$StoreSettingPayload, S>

  type StoreSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StoreSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoreSettingCountAggregateInputType | true
    }

  export interface StoreSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StoreSetting'], meta: { name: 'StoreSetting' } }
    /**
     * Find zero or one StoreSetting that matches the filter.
     * @param {StoreSettingFindUniqueArgs} args - Arguments to find a StoreSetting
     * @example
     * // Get one StoreSetting
     * const storeSetting = await prisma.storeSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoreSettingFindUniqueArgs>(args: SelectSubset<T, StoreSettingFindUniqueArgs<ExtArgs>>): Prisma__StoreSettingClient<$Result.GetResult<Prisma.$StoreSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StoreSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StoreSettingFindUniqueOrThrowArgs} args - Arguments to find a StoreSetting
     * @example
     * // Get one StoreSetting
     * const storeSetting = await prisma.storeSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoreSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, StoreSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoreSettingClient<$Result.GetResult<Prisma.$StoreSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StoreSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreSettingFindFirstArgs} args - Arguments to find a StoreSetting
     * @example
     * // Get one StoreSetting
     * const storeSetting = await prisma.storeSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoreSettingFindFirstArgs>(args?: SelectSubset<T, StoreSettingFindFirstArgs<ExtArgs>>): Prisma__StoreSettingClient<$Result.GetResult<Prisma.$StoreSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StoreSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreSettingFindFirstOrThrowArgs} args - Arguments to find a StoreSetting
     * @example
     * // Get one StoreSetting
     * const storeSetting = await prisma.storeSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoreSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, StoreSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoreSettingClient<$Result.GetResult<Prisma.$StoreSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StoreSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StoreSettings
     * const storeSettings = await prisma.storeSetting.findMany()
     * 
     * // Get first 10 StoreSettings
     * const storeSettings = await prisma.storeSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storeSettingWithIdOnly = await prisma.storeSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoreSettingFindManyArgs>(args?: SelectSubset<T, StoreSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoreSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StoreSetting.
     * @param {StoreSettingCreateArgs} args - Arguments to create a StoreSetting.
     * @example
     * // Create one StoreSetting
     * const StoreSetting = await prisma.storeSetting.create({
     *   data: {
     *     // ... data to create a StoreSetting
     *   }
     * })
     * 
     */
    create<T extends StoreSettingCreateArgs>(args: SelectSubset<T, StoreSettingCreateArgs<ExtArgs>>): Prisma__StoreSettingClient<$Result.GetResult<Prisma.$StoreSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StoreSettings.
     * @param {StoreSettingCreateManyArgs} args - Arguments to create many StoreSettings.
     * @example
     * // Create many StoreSettings
     * const storeSetting = await prisma.storeSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoreSettingCreateManyArgs>(args?: SelectSubset<T, StoreSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StoreSetting.
     * @param {StoreSettingDeleteArgs} args - Arguments to delete one StoreSetting.
     * @example
     * // Delete one StoreSetting
     * const StoreSetting = await prisma.storeSetting.delete({
     *   where: {
     *     // ... filter to delete one StoreSetting
     *   }
     * })
     * 
     */
    delete<T extends StoreSettingDeleteArgs>(args: SelectSubset<T, StoreSettingDeleteArgs<ExtArgs>>): Prisma__StoreSettingClient<$Result.GetResult<Prisma.$StoreSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StoreSetting.
     * @param {StoreSettingUpdateArgs} args - Arguments to update one StoreSetting.
     * @example
     * // Update one StoreSetting
     * const storeSetting = await prisma.storeSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoreSettingUpdateArgs>(args: SelectSubset<T, StoreSettingUpdateArgs<ExtArgs>>): Prisma__StoreSettingClient<$Result.GetResult<Prisma.$StoreSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StoreSettings.
     * @param {StoreSettingDeleteManyArgs} args - Arguments to filter StoreSettings to delete.
     * @example
     * // Delete a few StoreSettings
     * const { count } = await prisma.storeSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoreSettingDeleteManyArgs>(args?: SelectSubset<T, StoreSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StoreSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StoreSettings
     * const storeSetting = await prisma.storeSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoreSettingUpdateManyArgs>(args: SelectSubset<T, StoreSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StoreSetting.
     * @param {StoreSettingUpsertArgs} args - Arguments to update or create a StoreSetting.
     * @example
     * // Update or create a StoreSetting
     * const storeSetting = await prisma.storeSetting.upsert({
     *   create: {
     *     // ... data to create a StoreSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StoreSetting we want to update
     *   }
     * })
     */
    upsert<T extends StoreSettingUpsertArgs>(args: SelectSubset<T, StoreSettingUpsertArgs<ExtArgs>>): Prisma__StoreSettingClient<$Result.GetResult<Prisma.$StoreSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StoreSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreSettingCountArgs} args - Arguments to filter StoreSettings to count.
     * @example
     * // Count the number of StoreSettings
     * const count = await prisma.storeSetting.count({
     *   where: {
     *     // ... the filter for the StoreSettings we want to count
     *   }
     * })
    **/
    count<T extends StoreSettingCountArgs>(
      args?: Subset<T, StoreSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StoreSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreSettingAggregateArgs>(args: Subset<T, StoreSettingAggregateArgs>): Prisma.PrismaPromise<GetStoreSettingAggregateType<T>>

    /**
     * Group by StoreSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoreSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoreSettingGroupByArgs['orderBy'] }
        : { orderBy?: StoreSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoreSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StoreSetting model
   */
  readonly fields: StoreSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StoreSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoreSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StoreSetting model
   */
  interface StoreSettingFieldRefs {
    readonly id: FieldRef<"StoreSetting", 'String'>
    readonly store_name: FieldRef<"StoreSetting", 'String'>
    readonly instagram_url: FieldRef<"StoreSetting", 'String'>
    readonly whatsapp_url: FieldRef<"StoreSetting", 'String'>
    readonly email: FieldRef<"StoreSetting", 'String'>
    readonly created_at: FieldRef<"StoreSetting", 'DateTime'>
    readonly updated_at: FieldRef<"StoreSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StoreSetting findUnique
   */
  export type StoreSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
    /**
     * Filter, which StoreSetting to fetch.
     */
    where: StoreSettingWhereUniqueInput
  }

  /**
   * StoreSetting findUniqueOrThrow
   */
  export type StoreSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
    /**
     * Filter, which StoreSetting to fetch.
     */
    where: StoreSettingWhereUniqueInput
  }

  /**
   * StoreSetting findFirst
   */
  export type StoreSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
    /**
     * Filter, which StoreSetting to fetch.
     */
    where?: StoreSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreSettings to fetch.
     */
    orderBy?: StoreSettingOrderByWithRelationInput | StoreSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoreSettings.
     */
    cursor?: StoreSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoreSettings.
     */
    distinct?: StoreSettingScalarFieldEnum | StoreSettingScalarFieldEnum[]
  }

  /**
   * StoreSetting findFirstOrThrow
   */
  export type StoreSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
    /**
     * Filter, which StoreSetting to fetch.
     */
    where?: StoreSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreSettings to fetch.
     */
    orderBy?: StoreSettingOrderByWithRelationInput | StoreSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoreSettings.
     */
    cursor?: StoreSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoreSettings.
     */
    distinct?: StoreSettingScalarFieldEnum | StoreSettingScalarFieldEnum[]
  }

  /**
   * StoreSetting findMany
   */
  export type StoreSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
    /**
     * Filter, which StoreSettings to fetch.
     */
    where?: StoreSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreSettings to fetch.
     */
    orderBy?: StoreSettingOrderByWithRelationInput | StoreSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StoreSettings.
     */
    cursor?: StoreSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreSettings.
     */
    skip?: number
    distinct?: StoreSettingScalarFieldEnum | StoreSettingScalarFieldEnum[]
  }

  /**
   * StoreSetting create
   */
  export type StoreSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
    /**
     * The data needed to create a StoreSetting.
     */
    data: XOR<StoreSettingCreateInput, StoreSettingUncheckedCreateInput>
  }

  /**
   * StoreSetting createMany
   */
  export type StoreSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StoreSettings.
     */
    data: StoreSettingCreateManyInput | StoreSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StoreSetting update
   */
  export type StoreSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
    /**
     * The data needed to update a StoreSetting.
     */
    data: XOR<StoreSettingUpdateInput, StoreSettingUncheckedUpdateInput>
    /**
     * Choose, which StoreSetting to update.
     */
    where: StoreSettingWhereUniqueInput
  }

  /**
   * StoreSetting updateMany
   */
  export type StoreSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StoreSettings.
     */
    data: XOR<StoreSettingUpdateManyMutationInput, StoreSettingUncheckedUpdateManyInput>
    /**
     * Filter which StoreSettings to update
     */
    where?: StoreSettingWhereInput
    /**
     * Limit how many StoreSettings to update.
     */
    limit?: number
  }

  /**
   * StoreSetting upsert
   */
  export type StoreSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
    /**
     * The filter to search for the StoreSetting to update in case it exists.
     */
    where: StoreSettingWhereUniqueInput
    /**
     * In case the StoreSetting found by the `where` argument doesn't exist, create a new StoreSetting with this data.
     */
    create: XOR<StoreSettingCreateInput, StoreSettingUncheckedCreateInput>
    /**
     * In case the StoreSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoreSettingUpdateInput, StoreSettingUncheckedUpdateInput>
  }

  /**
   * StoreSetting delete
   */
  export type StoreSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
    /**
     * Filter which StoreSetting to delete.
     */
    where: StoreSettingWhereUniqueInput
  }

  /**
   * StoreSetting deleteMany
   */
  export type StoreSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoreSettings to delete
     */
    where?: StoreSettingWhereInput
    /**
     * Limit how many StoreSettings to delete.
     */
    limit?: number
  }

  /**
   * StoreSetting without action
   */
  export type StoreSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreSetting
     */
    select?: StoreSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoreSetting
     */
    omit?: StoreSettingOmit<ExtArgs> | null
  }


  /**
   * Model AdminCredentials
   */

  export type AggregateAdminCredentials = {
    _count: AdminCredentialsCountAggregateOutputType | null
    _min: AdminCredentialsMinAggregateOutputType | null
    _max: AdminCredentialsMaxAggregateOutputType | null
  }

  export type AdminCredentialsMinAggregateOutputType = {
    id: string | null
    admin_password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AdminCredentialsMaxAggregateOutputType = {
    id: string | null
    admin_password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AdminCredentialsCountAggregateOutputType = {
    id: number
    admin_password: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AdminCredentialsMinAggregateInputType = {
    id?: true
    admin_password?: true
    created_at?: true
    updated_at?: true
  }

  export type AdminCredentialsMaxAggregateInputType = {
    id?: true
    admin_password?: true
    created_at?: true
    updated_at?: true
  }

  export type AdminCredentialsCountAggregateInputType = {
    id?: true
    admin_password?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AdminCredentialsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminCredentials to aggregate.
     */
    where?: AdminCredentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminCredentials to fetch.
     */
    orderBy?: AdminCredentialsOrderByWithRelationInput | AdminCredentialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminCredentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminCredentials
    **/
    _count?: true | AdminCredentialsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminCredentialsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminCredentialsMaxAggregateInputType
  }

  export type GetAdminCredentialsAggregateType<T extends AdminCredentialsAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminCredentials]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminCredentials[P]>
      : GetScalarType<T[P], AggregateAdminCredentials[P]>
  }




  export type AdminCredentialsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminCredentialsWhereInput
    orderBy?: AdminCredentialsOrderByWithAggregationInput | AdminCredentialsOrderByWithAggregationInput[]
    by: AdminCredentialsScalarFieldEnum[] | AdminCredentialsScalarFieldEnum
    having?: AdminCredentialsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCredentialsCountAggregateInputType | true
    _min?: AdminCredentialsMinAggregateInputType
    _max?: AdminCredentialsMaxAggregateInputType
  }

  export type AdminCredentialsGroupByOutputType = {
    id: string
    admin_password: string
    created_at: Date
    updated_at: Date
    _count: AdminCredentialsCountAggregateOutputType | null
    _min: AdminCredentialsMinAggregateOutputType | null
    _max: AdminCredentialsMaxAggregateOutputType | null
  }

  type GetAdminCredentialsGroupByPayload<T extends AdminCredentialsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminCredentialsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminCredentialsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminCredentialsGroupByOutputType[P]>
            : GetScalarType<T[P], AdminCredentialsGroupByOutputType[P]>
        }
      >
    >


  export type AdminCredentialsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    admin_password?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["adminCredentials"]>



  export type AdminCredentialsSelectScalar = {
    id?: boolean
    admin_password?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type AdminCredentialsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "admin_password" | "created_at" | "updated_at", ExtArgs["result"]["adminCredentials"]>

  export type $AdminCredentialsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminCredentials"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      admin_password: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["adminCredentials"]>
    composites: {}
  }

  type AdminCredentialsGetPayload<S extends boolean | null | undefined | AdminCredentialsDefaultArgs> = $Result.GetResult<Prisma.$AdminCredentialsPayload, S>

  type AdminCredentialsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminCredentialsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCredentialsCountAggregateInputType | true
    }

  export interface AdminCredentialsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminCredentials'], meta: { name: 'AdminCredentials' } }
    /**
     * Find zero or one AdminCredentials that matches the filter.
     * @param {AdminCredentialsFindUniqueArgs} args - Arguments to find a AdminCredentials
     * @example
     * // Get one AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminCredentialsFindUniqueArgs>(args: SelectSubset<T, AdminCredentialsFindUniqueArgs<ExtArgs>>): Prisma__AdminCredentialsClient<$Result.GetResult<Prisma.$AdminCredentialsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminCredentials that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminCredentialsFindUniqueOrThrowArgs} args - Arguments to find a AdminCredentials
     * @example
     * // Get one AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminCredentialsFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminCredentialsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminCredentialsClient<$Result.GetResult<Prisma.$AdminCredentialsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminCredentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCredentialsFindFirstArgs} args - Arguments to find a AdminCredentials
     * @example
     * // Get one AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminCredentialsFindFirstArgs>(args?: SelectSubset<T, AdminCredentialsFindFirstArgs<ExtArgs>>): Prisma__AdminCredentialsClient<$Result.GetResult<Prisma.$AdminCredentialsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminCredentials that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCredentialsFindFirstOrThrowArgs} args - Arguments to find a AdminCredentials
     * @example
     * // Get one AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminCredentialsFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminCredentialsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminCredentialsClient<$Result.GetResult<Prisma.$AdminCredentialsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminCredentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCredentialsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.findMany()
     * 
     * // Get first 10 AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminCredentialsWithIdOnly = await prisma.adminCredentials.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminCredentialsFindManyArgs>(args?: SelectSubset<T, AdminCredentialsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminCredentialsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminCredentials.
     * @param {AdminCredentialsCreateArgs} args - Arguments to create a AdminCredentials.
     * @example
     * // Create one AdminCredentials
     * const AdminCredentials = await prisma.adminCredentials.create({
     *   data: {
     *     // ... data to create a AdminCredentials
     *   }
     * })
     * 
     */
    create<T extends AdminCredentialsCreateArgs>(args: SelectSubset<T, AdminCredentialsCreateArgs<ExtArgs>>): Prisma__AdminCredentialsClient<$Result.GetResult<Prisma.$AdminCredentialsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminCredentials.
     * @param {AdminCredentialsCreateManyArgs} args - Arguments to create many AdminCredentials.
     * @example
     * // Create many AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCredentialsCreateManyArgs>(args?: SelectSubset<T, AdminCredentialsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AdminCredentials.
     * @param {AdminCredentialsDeleteArgs} args - Arguments to delete one AdminCredentials.
     * @example
     * // Delete one AdminCredentials
     * const AdminCredentials = await prisma.adminCredentials.delete({
     *   where: {
     *     // ... filter to delete one AdminCredentials
     *   }
     * })
     * 
     */
    delete<T extends AdminCredentialsDeleteArgs>(args: SelectSubset<T, AdminCredentialsDeleteArgs<ExtArgs>>): Prisma__AdminCredentialsClient<$Result.GetResult<Prisma.$AdminCredentialsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminCredentials.
     * @param {AdminCredentialsUpdateArgs} args - Arguments to update one AdminCredentials.
     * @example
     * // Update one AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminCredentialsUpdateArgs>(args: SelectSubset<T, AdminCredentialsUpdateArgs<ExtArgs>>): Prisma__AdminCredentialsClient<$Result.GetResult<Prisma.$AdminCredentialsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminCredentials.
     * @param {AdminCredentialsDeleteManyArgs} args - Arguments to filter AdminCredentials to delete.
     * @example
     * // Delete a few AdminCredentials
     * const { count } = await prisma.adminCredentials.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminCredentialsDeleteManyArgs>(args?: SelectSubset<T, AdminCredentialsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCredentialsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminCredentialsUpdateManyArgs>(args: SelectSubset<T, AdminCredentialsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminCredentials.
     * @param {AdminCredentialsUpsertArgs} args - Arguments to update or create a AdminCredentials.
     * @example
     * // Update or create a AdminCredentials
     * const adminCredentials = await prisma.adminCredentials.upsert({
     *   create: {
     *     // ... data to create a AdminCredentials
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminCredentials we want to update
     *   }
     * })
     */
    upsert<T extends AdminCredentialsUpsertArgs>(args: SelectSubset<T, AdminCredentialsUpsertArgs<ExtArgs>>): Prisma__AdminCredentialsClient<$Result.GetResult<Prisma.$AdminCredentialsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCredentialsCountArgs} args - Arguments to filter AdminCredentials to count.
     * @example
     * // Count the number of AdminCredentials
     * const count = await prisma.adminCredentials.count({
     *   where: {
     *     // ... the filter for the AdminCredentials we want to count
     *   }
     * })
    **/
    count<T extends AdminCredentialsCountArgs>(
      args?: Subset<T, AdminCredentialsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCredentialsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCredentialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminCredentialsAggregateArgs>(args: Subset<T, AdminCredentialsAggregateArgs>): Prisma.PrismaPromise<GetAdminCredentialsAggregateType<T>>

    /**
     * Group by AdminCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCredentialsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminCredentialsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminCredentialsGroupByArgs['orderBy'] }
        : { orderBy?: AdminCredentialsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminCredentialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminCredentialsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminCredentials model
   */
  readonly fields: AdminCredentialsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminCredentials.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminCredentialsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminCredentials model
   */
  interface AdminCredentialsFieldRefs {
    readonly id: FieldRef<"AdminCredentials", 'String'>
    readonly admin_password: FieldRef<"AdminCredentials", 'String'>
    readonly created_at: FieldRef<"AdminCredentials", 'DateTime'>
    readonly updated_at: FieldRef<"AdminCredentials", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminCredentials findUnique
   */
  export type AdminCredentialsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
    /**
     * Filter, which AdminCredentials to fetch.
     */
    where: AdminCredentialsWhereUniqueInput
  }

  /**
   * AdminCredentials findUniqueOrThrow
   */
  export type AdminCredentialsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
    /**
     * Filter, which AdminCredentials to fetch.
     */
    where: AdminCredentialsWhereUniqueInput
  }

  /**
   * AdminCredentials findFirst
   */
  export type AdminCredentialsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
    /**
     * Filter, which AdminCredentials to fetch.
     */
    where?: AdminCredentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminCredentials to fetch.
     */
    orderBy?: AdminCredentialsOrderByWithRelationInput | AdminCredentialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminCredentials.
     */
    cursor?: AdminCredentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminCredentials.
     */
    distinct?: AdminCredentialsScalarFieldEnum | AdminCredentialsScalarFieldEnum[]
  }

  /**
   * AdminCredentials findFirstOrThrow
   */
  export type AdminCredentialsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
    /**
     * Filter, which AdminCredentials to fetch.
     */
    where?: AdminCredentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminCredentials to fetch.
     */
    orderBy?: AdminCredentialsOrderByWithRelationInput | AdminCredentialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminCredentials.
     */
    cursor?: AdminCredentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminCredentials.
     */
    distinct?: AdminCredentialsScalarFieldEnum | AdminCredentialsScalarFieldEnum[]
  }

  /**
   * AdminCredentials findMany
   */
  export type AdminCredentialsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
    /**
     * Filter, which AdminCredentials to fetch.
     */
    where?: AdminCredentialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminCredentials to fetch.
     */
    orderBy?: AdminCredentialsOrderByWithRelationInput | AdminCredentialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminCredentials.
     */
    cursor?: AdminCredentialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminCredentials.
     */
    skip?: number
    distinct?: AdminCredentialsScalarFieldEnum | AdminCredentialsScalarFieldEnum[]
  }

  /**
   * AdminCredentials create
   */
  export type AdminCredentialsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
    /**
     * The data needed to create a AdminCredentials.
     */
    data: XOR<AdminCredentialsCreateInput, AdminCredentialsUncheckedCreateInput>
  }

  /**
   * AdminCredentials createMany
   */
  export type AdminCredentialsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminCredentials.
     */
    data: AdminCredentialsCreateManyInput | AdminCredentialsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminCredentials update
   */
  export type AdminCredentialsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
    /**
     * The data needed to update a AdminCredentials.
     */
    data: XOR<AdminCredentialsUpdateInput, AdminCredentialsUncheckedUpdateInput>
    /**
     * Choose, which AdminCredentials to update.
     */
    where: AdminCredentialsWhereUniqueInput
  }

  /**
   * AdminCredentials updateMany
   */
  export type AdminCredentialsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminCredentials.
     */
    data: XOR<AdminCredentialsUpdateManyMutationInput, AdminCredentialsUncheckedUpdateManyInput>
    /**
     * Filter which AdminCredentials to update
     */
    where?: AdminCredentialsWhereInput
    /**
     * Limit how many AdminCredentials to update.
     */
    limit?: number
  }

  /**
   * AdminCredentials upsert
   */
  export type AdminCredentialsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
    /**
     * The filter to search for the AdminCredentials to update in case it exists.
     */
    where: AdminCredentialsWhereUniqueInput
    /**
     * In case the AdminCredentials found by the `where` argument doesn't exist, create a new AdminCredentials with this data.
     */
    create: XOR<AdminCredentialsCreateInput, AdminCredentialsUncheckedCreateInput>
    /**
     * In case the AdminCredentials was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminCredentialsUpdateInput, AdminCredentialsUncheckedUpdateInput>
  }

  /**
   * AdminCredentials delete
   */
  export type AdminCredentialsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
    /**
     * Filter which AdminCredentials to delete.
     */
    where: AdminCredentialsWhereUniqueInput
  }

  /**
   * AdminCredentials deleteMany
   */
  export type AdminCredentialsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminCredentials to delete
     */
    where?: AdminCredentialsWhereInput
    /**
     * Limit how many AdminCredentials to delete.
     */
    limit?: number
  }

  /**
   * AdminCredentials without action
   */
  export type AdminCredentialsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCredentials
     */
    select?: AdminCredentialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminCredentials
     */
    omit?: AdminCredentialsOmit<ExtArgs> | null
  }


  /**
   * Model HeroSetting
   */

  export type AggregateHeroSetting = {
    _count: HeroSettingCountAggregateOutputType | null
    _min: HeroSettingMinAggregateOutputType | null
    _max: HeroSettingMaxAggregateOutputType | null
  }

  export type HeroSettingMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type HeroSettingMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type HeroSettingCountAggregateOutputType = {
    id: number
    slides: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type HeroSettingMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type HeroSettingMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type HeroSettingCountAggregateInputType = {
    id?: true
    slides?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type HeroSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HeroSetting to aggregate.
     */
    where?: HeroSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeroSettings to fetch.
     */
    orderBy?: HeroSettingOrderByWithRelationInput | HeroSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HeroSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeroSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeroSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HeroSettings
    **/
    _count?: true | HeroSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HeroSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HeroSettingMaxAggregateInputType
  }

  export type GetHeroSettingAggregateType<T extends HeroSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateHeroSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHeroSetting[P]>
      : GetScalarType<T[P], AggregateHeroSetting[P]>
  }




  export type HeroSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HeroSettingWhereInput
    orderBy?: HeroSettingOrderByWithAggregationInput | HeroSettingOrderByWithAggregationInput[]
    by: HeroSettingScalarFieldEnum[] | HeroSettingScalarFieldEnum
    having?: HeroSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HeroSettingCountAggregateInputType | true
    _min?: HeroSettingMinAggregateInputType
    _max?: HeroSettingMaxAggregateInputType
  }

  export type HeroSettingGroupByOutputType = {
    id: string
    slides: JsonValue | null
    created_at: Date
    updated_at: Date
    _count: HeroSettingCountAggregateOutputType | null
    _min: HeroSettingMinAggregateOutputType | null
    _max: HeroSettingMaxAggregateOutputType | null
  }

  type GetHeroSettingGroupByPayload<T extends HeroSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HeroSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HeroSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HeroSettingGroupByOutputType[P]>
            : GetScalarType<T[P], HeroSettingGroupByOutputType[P]>
        }
      >
    >


  export type HeroSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slides?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["heroSetting"]>



  export type HeroSettingSelectScalar = {
    id?: boolean
    slides?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type HeroSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slides" | "created_at" | "updated_at", ExtArgs["result"]["heroSetting"]>

  export type $HeroSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HeroSetting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      slides: Prisma.JsonValue | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["heroSetting"]>
    composites: {}
  }

  type HeroSettingGetPayload<S extends boolean | null | undefined | HeroSettingDefaultArgs> = $Result.GetResult<Prisma.$HeroSettingPayload, S>

  type HeroSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HeroSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HeroSettingCountAggregateInputType | true
    }

  export interface HeroSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HeroSetting'], meta: { name: 'HeroSetting' } }
    /**
     * Find zero or one HeroSetting that matches the filter.
     * @param {HeroSettingFindUniqueArgs} args - Arguments to find a HeroSetting
     * @example
     * // Get one HeroSetting
     * const heroSetting = await prisma.heroSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HeroSettingFindUniqueArgs>(args: SelectSubset<T, HeroSettingFindUniqueArgs<ExtArgs>>): Prisma__HeroSettingClient<$Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HeroSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HeroSettingFindUniqueOrThrowArgs} args - Arguments to find a HeroSetting
     * @example
     * // Get one HeroSetting
     * const heroSetting = await prisma.heroSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HeroSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, HeroSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HeroSettingClient<$Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HeroSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroSettingFindFirstArgs} args - Arguments to find a HeroSetting
     * @example
     * // Get one HeroSetting
     * const heroSetting = await prisma.heroSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HeroSettingFindFirstArgs>(args?: SelectSubset<T, HeroSettingFindFirstArgs<ExtArgs>>): Prisma__HeroSettingClient<$Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HeroSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroSettingFindFirstOrThrowArgs} args - Arguments to find a HeroSetting
     * @example
     * // Get one HeroSetting
     * const heroSetting = await prisma.heroSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HeroSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, HeroSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__HeroSettingClient<$Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HeroSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HeroSettings
     * const heroSettings = await prisma.heroSetting.findMany()
     * 
     * // Get first 10 HeroSettings
     * const heroSettings = await prisma.heroSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const heroSettingWithIdOnly = await prisma.heroSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HeroSettingFindManyArgs>(args?: SelectSubset<T, HeroSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HeroSetting.
     * @param {HeroSettingCreateArgs} args - Arguments to create a HeroSetting.
     * @example
     * // Create one HeroSetting
     * const HeroSetting = await prisma.heroSetting.create({
     *   data: {
     *     // ... data to create a HeroSetting
     *   }
     * })
     * 
     */
    create<T extends HeroSettingCreateArgs>(args: SelectSubset<T, HeroSettingCreateArgs<ExtArgs>>): Prisma__HeroSettingClient<$Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HeroSettings.
     * @param {HeroSettingCreateManyArgs} args - Arguments to create many HeroSettings.
     * @example
     * // Create many HeroSettings
     * const heroSetting = await prisma.heroSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HeroSettingCreateManyArgs>(args?: SelectSubset<T, HeroSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HeroSetting.
     * @param {HeroSettingDeleteArgs} args - Arguments to delete one HeroSetting.
     * @example
     * // Delete one HeroSetting
     * const HeroSetting = await prisma.heroSetting.delete({
     *   where: {
     *     // ... filter to delete one HeroSetting
     *   }
     * })
     * 
     */
    delete<T extends HeroSettingDeleteArgs>(args: SelectSubset<T, HeroSettingDeleteArgs<ExtArgs>>): Prisma__HeroSettingClient<$Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HeroSetting.
     * @param {HeroSettingUpdateArgs} args - Arguments to update one HeroSetting.
     * @example
     * // Update one HeroSetting
     * const heroSetting = await prisma.heroSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HeroSettingUpdateArgs>(args: SelectSubset<T, HeroSettingUpdateArgs<ExtArgs>>): Prisma__HeroSettingClient<$Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HeroSettings.
     * @param {HeroSettingDeleteManyArgs} args - Arguments to filter HeroSettings to delete.
     * @example
     * // Delete a few HeroSettings
     * const { count } = await prisma.heroSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HeroSettingDeleteManyArgs>(args?: SelectSubset<T, HeroSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HeroSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HeroSettings
     * const heroSetting = await prisma.heroSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HeroSettingUpdateManyArgs>(args: SelectSubset<T, HeroSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HeroSetting.
     * @param {HeroSettingUpsertArgs} args - Arguments to update or create a HeroSetting.
     * @example
     * // Update or create a HeroSetting
     * const heroSetting = await prisma.heroSetting.upsert({
     *   create: {
     *     // ... data to create a HeroSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HeroSetting we want to update
     *   }
     * })
     */
    upsert<T extends HeroSettingUpsertArgs>(args: SelectSubset<T, HeroSettingUpsertArgs<ExtArgs>>): Prisma__HeroSettingClient<$Result.GetResult<Prisma.$HeroSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HeroSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroSettingCountArgs} args - Arguments to filter HeroSettings to count.
     * @example
     * // Count the number of HeroSettings
     * const count = await prisma.heroSetting.count({
     *   where: {
     *     // ... the filter for the HeroSettings we want to count
     *   }
     * })
    **/
    count<T extends HeroSettingCountArgs>(
      args?: Subset<T, HeroSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HeroSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HeroSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HeroSettingAggregateArgs>(args: Subset<T, HeroSettingAggregateArgs>): Prisma.PrismaPromise<GetHeroSettingAggregateType<T>>

    /**
     * Group by HeroSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeroSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HeroSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HeroSettingGroupByArgs['orderBy'] }
        : { orderBy?: HeroSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HeroSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHeroSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HeroSetting model
   */
  readonly fields: HeroSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HeroSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HeroSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HeroSetting model
   */
  interface HeroSettingFieldRefs {
    readonly id: FieldRef<"HeroSetting", 'String'>
    readonly slides: FieldRef<"HeroSetting", 'Json'>
    readonly created_at: FieldRef<"HeroSetting", 'DateTime'>
    readonly updated_at: FieldRef<"HeroSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HeroSetting findUnique
   */
  export type HeroSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
    /**
     * Filter, which HeroSetting to fetch.
     */
    where: HeroSettingWhereUniqueInput
  }

  /**
   * HeroSetting findUniqueOrThrow
   */
  export type HeroSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
    /**
     * Filter, which HeroSetting to fetch.
     */
    where: HeroSettingWhereUniqueInput
  }

  /**
   * HeroSetting findFirst
   */
  export type HeroSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
    /**
     * Filter, which HeroSetting to fetch.
     */
    where?: HeroSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeroSettings to fetch.
     */
    orderBy?: HeroSettingOrderByWithRelationInput | HeroSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HeroSettings.
     */
    cursor?: HeroSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeroSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeroSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HeroSettings.
     */
    distinct?: HeroSettingScalarFieldEnum | HeroSettingScalarFieldEnum[]
  }

  /**
   * HeroSetting findFirstOrThrow
   */
  export type HeroSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
    /**
     * Filter, which HeroSetting to fetch.
     */
    where?: HeroSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeroSettings to fetch.
     */
    orderBy?: HeroSettingOrderByWithRelationInput | HeroSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HeroSettings.
     */
    cursor?: HeroSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeroSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeroSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HeroSettings.
     */
    distinct?: HeroSettingScalarFieldEnum | HeroSettingScalarFieldEnum[]
  }

  /**
   * HeroSetting findMany
   */
  export type HeroSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
    /**
     * Filter, which HeroSettings to fetch.
     */
    where?: HeroSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeroSettings to fetch.
     */
    orderBy?: HeroSettingOrderByWithRelationInput | HeroSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HeroSettings.
     */
    cursor?: HeroSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeroSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeroSettings.
     */
    skip?: number
    distinct?: HeroSettingScalarFieldEnum | HeroSettingScalarFieldEnum[]
  }

  /**
   * HeroSetting create
   */
  export type HeroSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
    /**
     * The data needed to create a HeroSetting.
     */
    data: XOR<HeroSettingCreateInput, HeroSettingUncheckedCreateInput>
  }

  /**
   * HeroSetting createMany
   */
  export type HeroSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HeroSettings.
     */
    data: HeroSettingCreateManyInput | HeroSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HeroSetting update
   */
  export type HeroSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
    /**
     * The data needed to update a HeroSetting.
     */
    data: XOR<HeroSettingUpdateInput, HeroSettingUncheckedUpdateInput>
    /**
     * Choose, which HeroSetting to update.
     */
    where: HeroSettingWhereUniqueInput
  }

  /**
   * HeroSetting updateMany
   */
  export type HeroSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HeroSettings.
     */
    data: XOR<HeroSettingUpdateManyMutationInput, HeroSettingUncheckedUpdateManyInput>
    /**
     * Filter which HeroSettings to update
     */
    where?: HeroSettingWhereInput
    /**
     * Limit how many HeroSettings to update.
     */
    limit?: number
  }

  /**
   * HeroSetting upsert
   */
  export type HeroSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
    /**
     * The filter to search for the HeroSetting to update in case it exists.
     */
    where: HeroSettingWhereUniqueInput
    /**
     * In case the HeroSetting found by the `where` argument doesn't exist, create a new HeroSetting with this data.
     */
    create: XOR<HeroSettingCreateInput, HeroSettingUncheckedCreateInput>
    /**
     * In case the HeroSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HeroSettingUpdateInput, HeroSettingUncheckedUpdateInput>
  }

  /**
   * HeroSetting delete
   */
  export type HeroSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
    /**
     * Filter which HeroSetting to delete.
     */
    where: HeroSettingWhereUniqueInput
  }

  /**
   * HeroSetting deleteMany
   */
  export type HeroSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HeroSettings to delete
     */
    where?: HeroSettingWhereInput
    /**
     * Limit how many HeroSettings to delete.
     */
    limit?: number
  }

  /**
   * HeroSetting without action
   */
  export type HeroSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeroSetting
     */
    select?: HeroSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeroSetting
     */
    omit?: HeroSettingOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const PieceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category_id: 'category_id',
    status: 'status',
    image_url: 'image_url',
    images: 'images',
    image_position_x: 'image_position_x',
    image_position_y: 'image_position_y',
    image_zoom: 'image_zoom',
    description: 'description',
    measurements: 'measurements',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PieceScalarFieldEnum = (typeof PieceScalarFieldEnum)[keyof typeof PieceScalarFieldEnum]


  export const StoreSettingScalarFieldEnum: {
    id: 'id',
    store_name: 'store_name',
    instagram_url: 'instagram_url',
    whatsapp_url: 'whatsapp_url',
    email: 'email',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type StoreSettingScalarFieldEnum = (typeof StoreSettingScalarFieldEnum)[keyof typeof StoreSettingScalarFieldEnum]


  export const AdminCredentialsScalarFieldEnum: {
    id: 'id',
    admin_password: 'admin_password',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AdminCredentialsScalarFieldEnum = (typeof AdminCredentialsScalarFieldEnum)[keyof typeof AdminCredentialsScalarFieldEnum]


  export const HeroSettingScalarFieldEnum: {
    id: 'id',
    slides: 'slides',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type HeroSettingScalarFieldEnum = (typeof HeroSettingScalarFieldEnum)[keyof typeof HeroSettingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const CategoryOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug'
  };

  export type CategoryOrderByRelevanceFieldEnum = (typeof CategoryOrderByRelevanceFieldEnum)[keyof typeof CategoryOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const PieceOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    category_id: 'category_id',
    status: 'status',
    image_url: 'image_url',
    description: 'description'
  };

  export type PieceOrderByRelevanceFieldEnum = (typeof PieceOrderByRelevanceFieldEnum)[keyof typeof PieceOrderByRelevanceFieldEnum]


  export const StoreSettingOrderByRelevanceFieldEnum: {
    id: 'id',
    store_name: 'store_name',
    instagram_url: 'instagram_url',
    whatsapp_url: 'whatsapp_url',
    email: 'email'
  };

  export type StoreSettingOrderByRelevanceFieldEnum = (typeof StoreSettingOrderByRelevanceFieldEnum)[keyof typeof StoreSettingOrderByRelevanceFieldEnum]


  export const AdminCredentialsOrderByRelevanceFieldEnum: {
    id: 'id',
    admin_password: 'admin_password'
  };

  export type AdminCredentialsOrderByRelevanceFieldEnum = (typeof AdminCredentialsOrderByRelevanceFieldEnum)[keyof typeof AdminCredentialsOrderByRelevanceFieldEnum]


  export const HeroSettingOrderByRelevanceFieldEnum: {
    id: 'id'
  };

  export type HeroSettingOrderByRelevanceFieldEnum = (typeof HeroSettingOrderByRelevanceFieldEnum)[keyof typeof HeroSettingOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    is_active?: BoolFilter<"Category"> | boolean
    created_at?: DateTimeFilter<"Category"> | Date | string
    updated_at?: DateTimeFilter<"Category"> | Date | string
    pieces?: PieceListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    pieces?: PieceOrderByRelationAggregateInput
    _relevance?: CategoryOrderByRelevanceInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    is_active?: BoolFilter<"Category"> | boolean
    created_at?: DateTimeFilter<"Category"> | Date | string
    updated_at?: DateTimeFilter<"Category"> | Date | string
    pieces?: PieceListRelationFilter
  }, "id" | "name" | "slug">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    slug?: StringWithAggregatesFilter<"Category"> | string
    is_active?: BoolWithAggregatesFilter<"Category"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type PieceWhereInput = {
    AND?: PieceWhereInput | PieceWhereInput[]
    OR?: PieceWhereInput[]
    NOT?: PieceWhereInput | PieceWhereInput[]
    id?: StringFilter<"Piece"> | string
    name?: StringFilter<"Piece"> | string
    category_id?: StringFilter<"Piece"> | string
    status?: StringFilter<"Piece"> | string
    image_url?: StringNullableFilter<"Piece"> | string | null
    images?: JsonNullableFilter<"Piece">
    image_position_x?: FloatNullableFilter<"Piece"> | number | null
    image_position_y?: FloatNullableFilter<"Piece"> | number | null
    image_zoom?: FloatNullableFilter<"Piece"> | number | null
    description?: StringNullableFilter<"Piece"> | string | null
    measurements?: JsonNullableFilter<"Piece">
    created_at?: DateTimeFilter<"Piece"> | Date | string
    updated_at?: DateTimeFilter<"Piece"> | Date | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }

  export type PieceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    image_url?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    image_position_x?: SortOrderInput | SortOrder
    image_position_y?: SortOrderInput | SortOrder
    image_zoom?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    measurements?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    category?: CategoryOrderByWithRelationInput
    _relevance?: PieceOrderByRelevanceInput
  }

  export type PieceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PieceWhereInput | PieceWhereInput[]
    OR?: PieceWhereInput[]
    NOT?: PieceWhereInput | PieceWhereInput[]
    name?: StringFilter<"Piece"> | string
    category_id?: StringFilter<"Piece"> | string
    status?: StringFilter<"Piece"> | string
    image_url?: StringNullableFilter<"Piece"> | string | null
    images?: JsonNullableFilter<"Piece">
    image_position_x?: FloatNullableFilter<"Piece"> | number | null
    image_position_y?: FloatNullableFilter<"Piece"> | number | null
    image_zoom?: FloatNullableFilter<"Piece"> | number | null
    description?: StringNullableFilter<"Piece"> | string | null
    measurements?: JsonNullableFilter<"Piece">
    created_at?: DateTimeFilter<"Piece"> | Date | string
    updated_at?: DateTimeFilter<"Piece"> | Date | string
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }, "id">

  export type PieceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    image_url?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    image_position_x?: SortOrderInput | SortOrder
    image_position_y?: SortOrderInput | SortOrder
    image_zoom?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    measurements?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PieceCountOrderByAggregateInput
    _avg?: PieceAvgOrderByAggregateInput
    _max?: PieceMaxOrderByAggregateInput
    _min?: PieceMinOrderByAggregateInput
    _sum?: PieceSumOrderByAggregateInput
  }

  export type PieceScalarWhereWithAggregatesInput = {
    AND?: PieceScalarWhereWithAggregatesInput | PieceScalarWhereWithAggregatesInput[]
    OR?: PieceScalarWhereWithAggregatesInput[]
    NOT?: PieceScalarWhereWithAggregatesInput | PieceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Piece"> | string
    name?: StringWithAggregatesFilter<"Piece"> | string
    category_id?: StringWithAggregatesFilter<"Piece"> | string
    status?: StringWithAggregatesFilter<"Piece"> | string
    image_url?: StringNullableWithAggregatesFilter<"Piece"> | string | null
    images?: JsonNullableWithAggregatesFilter<"Piece">
    image_position_x?: FloatNullableWithAggregatesFilter<"Piece"> | number | null
    image_position_y?: FloatNullableWithAggregatesFilter<"Piece"> | number | null
    image_zoom?: FloatNullableWithAggregatesFilter<"Piece"> | number | null
    description?: StringNullableWithAggregatesFilter<"Piece"> | string | null
    measurements?: JsonNullableWithAggregatesFilter<"Piece">
    created_at?: DateTimeWithAggregatesFilter<"Piece"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Piece"> | Date | string
  }

  export type StoreSettingWhereInput = {
    AND?: StoreSettingWhereInput | StoreSettingWhereInput[]
    OR?: StoreSettingWhereInput[]
    NOT?: StoreSettingWhereInput | StoreSettingWhereInput[]
    id?: StringFilter<"StoreSetting"> | string
    store_name?: StringFilter<"StoreSetting"> | string
    instagram_url?: StringNullableFilter<"StoreSetting"> | string | null
    whatsapp_url?: StringNullableFilter<"StoreSetting"> | string | null
    email?: StringNullableFilter<"StoreSetting"> | string | null
    created_at?: DateTimeFilter<"StoreSetting"> | Date | string
    updated_at?: DateTimeFilter<"StoreSetting"> | Date | string
  }

  export type StoreSettingOrderByWithRelationInput = {
    id?: SortOrder
    store_name?: SortOrder
    instagram_url?: SortOrderInput | SortOrder
    whatsapp_url?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _relevance?: StoreSettingOrderByRelevanceInput
  }

  export type StoreSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StoreSettingWhereInput | StoreSettingWhereInput[]
    OR?: StoreSettingWhereInput[]
    NOT?: StoreSettingWhereInput | StoreSettingWhereInput[]
    store_name?: StringFilter<"StoreSetting"> | string
    instagram_url?: StringNullableFilter<"StoreSetting"> | string | null
    whatsapp_url?: StringNullableFilter<"StoreSetting"> | string | null
    email?: StringNullableFilter<"StoreSetting"> | string | null
    created_at?: DateTimeFilter<"StoreSetting"> | Date | string
    updated_at?: DateTimeFilter<"StoreSetting"> | Date | string
  }, "id">

  export type StoreSettingOrderByWithAggregationInput = {
    id?: SortOrder
    store_name?: SortOrder
    instagram_url?: SortOrderInput | SortOrder
    whatsapp_url?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: StoreSettingCountOrderByAggregateInput
    _max?: StoreSettingMaxOrderByAggregateInput
    _min?: StoreSettingMinOrderByAggregateInput
  }

  export type StoreSettingScalarWhereWithAggregatesInput = {
    AND?: StoreSettingScalarWhereWithAggregatesInput | StoreSettingScalarWhereWithAggregatesInput[]
    OR?: StoreSettingScalarWhereWithAggregatesInput[]
    NOT?: StoreSettingScalarWhereWithAggregatesInput | StoreSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StoreSetting"> | string
    store_name?: StringWithAggregatesFilter<"StoreSetting"> | string
    instagram_url?: StringNullableWithAggregatesFilter<"StoreSetting"> | string | null
    whatsapp_url?: StringNullableWithAggregatesFilter<"StoreSetting"> | string | null
    email?: StringNullableWithAggregatesFilter<"StoreSetting"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"StoreSetting"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"StoreSetting"> | Date | string
  }

  export type AdminCredentialsWhereInput = {
    AND?: AdminCredentialsWhereInput | AdminCredentialsWhereInput[]
    OR?: AdminCredentialsWhereInput[]
    NOT?: AdminCredentialsWhereInput | AdminCredentialsWhereInput[]
    id?: StringFilter<"AdminCredentials"> | string
    admin_password?: StringFilter<"AdminCredentials"> | string
    created_at?: DateTimeFilter<"AdminCredentials"> | Date | string
    updated_at?: DateTimeFilter<"AdminCredentials"> | Date | string
  }

  export type AdminCredentialsOrderByWithRelationInput = {
    id?: SortOrder
    admin_password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _relevance?: AdminCredentialsOrderByRelevanceInput
  }

  export type AdminCredentialsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminCredentialsWhereInput | AdminCredentialsWhereInput[]
    OR?: AdminCredentialsWhereInput[]
    NOT?: AdminCredentialsWhereInput | AdminCredentialsWhereInput[]
    admin_password?: StringFilter<"AdminCredentials"> | string
    created_at?: DateTimeFilter<"AdminCredentials"> | Date | string
    updated_at?: DateTimeFilter<"AdminCredentials"> | Date | string
  }, "id">

  export type AdminCredentialsOrderByWithAggregationInput = {
    id?: SortOrder
    admin_password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: AdminCredentialsCountOrderByAggregateInput
    _max?: AdminCredentialsMaxOrderByAggregateInput
    _min?: AdminCredentialsMinOrderByAggregateInput
  }

  export type AdminCredentialsScalarWhereWithAggregatesInput = {
    AND?: AdminCredentialsScalarWhereWithAggregatesInput | AdminCredentialsScalarWhereWithAggregatesInput[]
    OR?: AdminCredentialsScalarWhereWithAggregatesInput[]
    NOT?: AdminCredentialsScalarWhereWithAggregatesInput | AdminCredentialsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminCredentials"> | string
    admin_password?: StringWithAggregatesFilter<"AdminCredentials"> | string
    created_at?: DateTimeWithAggregatesFilter<"AdminCredentials"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"AdminCredentials"> | Date | string
  }

  export type HeroSettingWhereInput = {
    AND?: HeroSettingWhereInput | HeroSettingWhereInput[]
    OR?: HeroSettingWhereInput[]
    NOT?: HeroSettingWhereInput | HeroSettingWhereInput[]
    id?: StringFilter<"HeroSetting"> | string
    slides?: JsonNullableFilter<"HeroSetting">
    created_at?: DateTimeFilter<"HeroSetting"> | Date | string
    updated_at?: DateTimeFilter<"HeroSetting"> | Date | string
  }

  export type HeroSettingOrderByWithRelationInput = {
    id?: SortOrder
    slides?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _relevance?: HeroSettingOrderByRelevanceInput
  }

  export type HeroSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HeroSettingWhereInput | HeroSettingWhereInput[]
    OR?: HeroSettingWhereInput[]
    NOT?: HeroSettingWhereInput | HeroSettingWhereInput[]
    slides?: JsonNullableFilter<"HeroSetting">
    created_at?: DateTimeFilter<"HeroSetting"> | Date | string
    updated_at?: DateTimeFilter<"HeroSetting"> | Date | string
  }, "id">

  export type HeroSettingOrderByWithAggregationInput = {
    id?: SortOrder
    slides?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: HeroSettingCountOrderByAggregateInput
    _max?: HeroSettingMaxOrderByAggregateInput
    _min?: HeroSettingMinOrderByAggregateInput
  }

  export type HeroSettingScalarWhereWithAggregatesInput = {
    AND?: HeroSettingScalarWhereWithAggregatesInput | HeroSettingScalarWhereWithAggregatesInput[]
    OR?: HeroSettingScalarWhereWithAggregatesInput[]
    NOT?: HeroSettingScalarWhereWithAggregatesInput | HeroSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HeroSetting"> | string
    slides?: JsonNullableWithAggregatesFilter<"HeroSetting">
    created_at?: DateTimeWithAggregatesFilter<"HeroSetting"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"HeroSetting"> | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    slug: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    pieces?: PieceCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    pieces?: PieceUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pieces?: PieceUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    pieces?: PieceUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    slug: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PieceCreateInput = {
    id?: string
    name: string
    status?: string
    image_url?: string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: number | null
    image_position_y?: number | null
    image_zoom?: number | null
    description?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    category: CategoryCreateNestedOneWithoutPiecesInput
  }

  export type PieceUncheckedCreateInput = {
    id?: string
    name: string
    category_id: string
    status?: string
    image_url?: string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: number | null
    image_position_y?: number | null
    image_zoom?: number | null
    description?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PieceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: NullableFloatFieldUpdateOperationsInput | number | null
    image_position_y?: NullableFloatFieldUpdateOperationsInput | number | null
    image_zoom?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutPiecesNestedInput
  }

  export type PieceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: NullableFloatFieldUpdateOperationsInput | number | null
    image_position_y?: NullableFloatFieldUpdateOperationsInput | number | null
    image_zoom?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PieceCreateManyInput = {
    id?: string
    name: string
    category_id: string
    status?: string
    image_url?: string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: number | null
    image_position_y?: number | null
    image_zoom?: number | null
    description?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PieceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: NullableFloatFieldUpdateOperationsInput | number | null
    image_position_y?: NullableFloatFieldUpdateOperationsInput | number | null
    image_zoom?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PieceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: NullableFloatFieldUpdateOperationsInput | number | null
    image_position_y?: NullableFloatFieldUpdateOperationsInput | number | null
    image_zoom?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreSettingCreateInput = {
    id?: string
    store_name: string
    instagram_url?: string | null
    whatsapp_url?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type StoreSettingUncheckedCreateInput = {
    id?: string
    store_name: string
    instagram_url?: string | null
    whatsapp_url?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type StoreSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    store_name?: StringFieldUpdateOperationsInput | string
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    store_name?: StringFieldUpdateOperationsInput | string
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreSettingCreateManyInput = {
    id?: string
    store_name: string
    instagram_url?: string | null
    whatsapp_url?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type StoreSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    store_name?: StringFieldUpdateOperationsInput | string
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    store_name?: StringFieldUpdateOperationsInput | string
    instagram_url?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp_url?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCredentialsCreateInput = {
    id?: string
    admin_password: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AdminCredentialsUncheckedCreateInput = {
    id?: string
    admin_password: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AdminCredentialsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    admin_password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCredentialsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    admin_password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCredentialsCreateManyInput = {
    id?: string
    admin_password: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AdminCredentialsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    admin_password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCredentialsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    admin_password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeroSettingCreateInput = {
    id?: string
    slides?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type HeroSettingUncheckedCreateInput = {
    id?: string
    slides?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type HeroSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slides?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeroSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slides?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeroSettingCreateManyInput = {
    id?: string
    slides?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type HeroSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slides?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeroSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    slides?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PieceListRelationFilter = {
    every?: PieceWhereInput
    some?: PieceWhereInput
    none?: PieceWhereInput
  }

  export type PieceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelevanceInput = {
    fields: CategoryOrderByRelevanceFieldEnum | CategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PieceOrderByRelevanceInput = {
    fields: PieceOrderByRelevanceFieldEnum | PieceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PieceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    image_url?: SortOrder
    images?: SortOrder
    image_position_x?: SortOrder
    image_position_y?: SortOrder
    image_zoom?: SortOrder
    description?: SortOrder
    measurements?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PieceAvgOrderByAggregateInput = {
    image_position_x?: SortOrder
    image_position_y?: SortOrder
    image_zoom?: SortOrder
  }

  export type PieceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    image_url?: SortOrder
    image_position_x?: SortOrder
    image_position_y?: SortOrder
    image_zoom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PieceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category_id?: SortOrder
    status?: SortOrder
    image_url?: SortOrder
    image_position_x?: SortOrder
    image_position_y?: SortOrder
    image_zoom?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PieceSumOrderByAggregateInput = {
    image_position_x?: SortOrder
    image_position_y?: SortOrder
    image_zoom?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StoreSettingOrderByRelevanceInput = {
    fields: StoreSettingOrderByRelevanceFieldEnum | StoreSettingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StoreSettingCountOrderByAggregateInput = {
    id?: SortOrder
    store_name?: SortOrder
    instagram_url?: SortOrder
    whatsapp_url?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StoreSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    store_name?: SortOrder
    instagram_url?: SortOrder
    whatsapp_url?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StoreSettingMinOrderByAggregateInput = {
    id?: SortOrder
    store_name?: SortOrder
    instagram_url?: SortOrder
    whatsapp_url?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AdminCredentialsOrderByRelevanceInput = {
    fields: AdminCredentialsOrderByRelevanceFieldEnum | AdminCredentialsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AdminCredentialsCountOrderByAggregateInput = {
    id?: SortOrder
    admin_password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AdminCredentialsMaxOrderByAggregateInput = {
    id?: SortOrder
    admin_password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AdminCredentialsMinOrderByAggregateInput = {
    id?: SortOrder
    admin_password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type HeroSettingOrderByRelevanceInput = {
    fields: HeroSettingOrderByRelevanceFieldEnum | HeroSettingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type HeroSettingCountOrderByAggregateInput = {
    id?: SortOrder
    slides?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type HeroSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type HeroSettingMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PieceCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PieceCreateWithoutCategoryInput, PieceUncheckedCreateWithoutCategoryInput> | PieceCreateWithoutCategoryInput[] | PieceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PieceCreateOrConnectWithoutCategoryInput | PieceCreateOrConnectWithoutCategoryInput[]
    createMany?: PieceCreateManyCategoryInputEnvelope
    connect?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
  }

  export type PieceUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PieceCreateWithoutCategoryInput, PieceUncheckedCreateWithoutCategoryInput> | PieceCreateWithoutCategoryInput[] | PieceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PieceCreateOrConnectWithoutCategoryInput | PieceCreateOrConnectWithoutCategoryInput[]
    createMany?: PieceCreateManyCategoryInputEnvelope
    connect?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PieceUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PieceCreateWithoutCategoryInput, PieceUncheckedCreateWithoutCategoryInput> | PieceCreateWithoutCategoryInput[] | PieceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PieceCreateOrConnectWithoutCategoryInput | PieceCreateOrConnectWithoutCategoryInput[]
    upsert?: PieceUpsertWithWhereUniqueWithoutCategoryInput | PieceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PieceCreateManyCategoryInputEnvelope
    set?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
    disconnect?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
    delete?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
    connect?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
    update?: PieceUpdateWithWhereUniqueWithoutCategoryInput | PieceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PieceUpdateManyWithWhereWithoutCategoryInput | PieceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PieceScalarWhereInput | PieceScalarWhereInput[]
  }

  export type PieceUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PieceCreateWithoutCategoryInput, PieceUncheckedCreateWithoutCategoryInput> | PieceCreateWithoutCategoryInput[] | PieceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PieceCreateOrConnectWithoutCategoryInput | PieceCreateOrConnectWithoutCategoryInput[]
    upsert?: PieceUpsertWithWhereUniqueWithoutCategoryInput | PieceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PieceCreateManyCategoryInputEnvelope
    set?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
    disconnect?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
    delete?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
    connect?: PieceWhereUniqueInput | PieceWhereUniqueInput[]
    update?: PieceUpdateWithWhereUniqueWithoutCategoryInput | PieceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PieceUpdateManyWithWhereWithoutCategoryInput | PieceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PieceScalarWhereInput | PieceScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutPiecesInput = {
    create?: XOR<CategoryCreateWithoutPiecesInput, CategoryUncheckedCreateWithoutPiecesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPiecesInput
    connect?: CategoryWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneRequiredWithoutPiecesNestedInput = {
    create?: XOR<CategoryCreateWithoutPiecesInput, CategoryUncheckedCreateWithoutPiecesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPiecesInput
    upsert?: CategoryUpsertWithoutPiecesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutPiecesInput, CategoryUpdateWithoutPiecesInput>, CategoryUncheckedUpdateWithoutPiecesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PieceCreateWithoutCategoryInput = {
    id?: string
    name: string
    status?: string
    image_url?: string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: number | null
    image_position_y?: number | null
    image_zoom?: number | null
    description?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PieceUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    status?: string
    image_url?: string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: number | null
    image_position_y?: number | null
    image_zoom?: number | null
    description?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PieceCreateOrConnectWithoutCategoryInput = {
    where: PieceWhereUniqueInput
    create: XOR<PieceCreateWithoutCategoryInput, PieceUncheckedCreateWithoutCategoryInput>
  }

  export type PieceCreateManyCategoryInputEnvelope = {
    data: PieceCreateManyCategoryInput | PieceCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type PieceUpsertWithWhereUniqueWithoutCategoryInput = {
    where: PieceWhereUniqueInput
    update: XOR<PieceUpdateWithoutCategoryInput, PieceUncheckedUpdateWithoutCategoryInput>
    create: XOR<PieceCreateWithoutCategoryInput, PieceUncheckedCreateWithoutCategoryInput>
  }

  export type PieceUpdateWithWhereUniqueWithoutCategoryInput = {
    where: PieceWhereUniqueInput
    data: XOR<PieceUpdateWithoutCategoryInput, PieceUncheckedUpdateWithoutCategoryInput>
  }

  export type PieceUpdateManyWithWhereWithoutCategoryInput = {
    where: PieceScalarWhereInput
    data: XOR<PieceUpdateManyMutationInput, PieceUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PieceScalarWhereInput = {
    AND?: PieceScalarWhereInput | PieceScalarWhereInput[]
    OR?: PieceScalarWhereInput[]
    NOT?: PieceScalarWhereInput | PieceScalarWhereInput[]
    id?: StringFilter<"Piece"> | string
    name?: StringFilter<"Piece"> | string
    category_id?: StringFilter<"Piece"> | string
    status?: StringFilter<"Piece"> | string
    image_url?: StringNullableFilter<"Piece"> | string | null
    images?: JsonNullableFilter<"Piece">
    image_position_x?: FloatNullableFilter<"Piece"> | number | null
    image_position_y?: FloatNullableFilter<"Piece"> | number | null
    image_zoom?: FloatNullableFilter<"Piece"> | number | null
    description?: StringNullableFilter<"Piece"> | string | null
    measurements?: JsonNullableFilter<"Piece">
    created_at?: DateTimeFilter<"Piece"> | Date | string
    updated_at?: DateTimeFilter<"Piece"> | Date | string
  }

  export type CategoryCreateWithoutPiecesInput = {
    id?: string
    name: string
    slug: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CategoryUncheckedCreateWithoutPiecesInput = {
    id?: string
    name: string
    slug: string
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CategoryCreateOrConnectWithoutPiecesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutPiecesInput, CategoryUncheckedCreateWithoutPiecesInput>
  }

  export type CategoryUpsertWithoutPiecesInput = {
    update: XOR<CategoryUpdateWithoutPiecesInput, CategoryUncheckedUpdateWithoutPiecesInput>
    create: XOR<CategoryCreateWithoutPiecesInput, CategoryUncheckedCreateWithoutPiecesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutPiecesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutPiecesInput, CategoryUncheckedUpdateWithoutPiecesInput>
  }

  export type CategoryUpdateWithoutPiecesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutPiecesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PieceCreateManyCategoryInput = {
    id?: string
    name: string
    status?: string
    image_url?: string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: number | null
    image_position_y?: number | null
    image_zoom?: number | null
    description?: string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PieceUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: NullableFloatFieldUpdateOperationsInput | number | null
    image_position_y?: NullableFloatFieldUpdateOperationsInput | number | null
    image_zoom?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PieceUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: NullableFloatFieldUpdateOperationsInput | number | null
    image_position_y?: NullableFloatFieldUpdateOperationsInput | number | null
    image_zoom?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PieceUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableJsonNullValueInput | InputJsonValue
    image_position_x?: NullableFloatFieldUpdateOperationsInput | number | null
    image_position_y?: NullableFloatFieldUpdateOperationsInput | number | null
    image_zoom?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    measurements?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}