"use strict";
// backend/src/api/routes/hero.route.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHeroRouter = void 0;
const express_1 = require("express");
const HeroService_1 = require("../../services/HeroService");
const createHeroRouter = (repositoryFactory) => {
    const router = (0, express_1.Router)();
    const heroSettingRepository = repositoryFactory.createHeroSettingRepository();
    const heroService = new HeroService_1.HeroService(heroSettingRepository); // Assumindo inje√ß√£o correta
    // üö® 1. ROTA GET CORRIGIDA: Lida com a URL vazia ("/") que o app.use envia
    router.get("/", async (req, res) => {
        try {
            // Usando o servi√ßo que criamos
            const { settings, slides } = await heroService.getSettingsAndSlides();
            if (!settings) {
                // Se o dado n√£o existe, retornamos um 404 propositalmente, o que o Frontend est√° vendo
                return res.status(404).json({
                    message: "Configura√ß√µes do Hero n√£o inicializadas na base de dados.",
                });
            }
            // Retorna a combina√ß√£o de configura√ß√µes e slides
            return res.json({ settings, slides });
        }
        catch (error) {
            console.error("Error fetching hero settings:", error);
            // Erro 500 para falhas de servidor/banco de dados
            return res
                .status(500)
                .json({ message: "Erro interno ao buscar configura√ß√µes do Hero." });
        }
    });
    // 2. ROTA PUT (Para refer√™ncia)
    router.put("/", async (req, res) => {
        // ... l√≥gica de PUT (j√° discutida)
        return res.status(501).json({ message: "Rota PUT n√£o implementada." });
    });
    return router;
};
exports.createHeroRouter = createHeroRouter;
//# sourceMappingURL=hero.route.js.map